#pragma once

#include<array>

namespace eval {

	enum GamePhases {
		MID_GAME, END_GAME,
		N_GAME_PHASES
	};

	inline std::array<std::array<std::array<std::array<Score, N_SQUARES>, N_GAME_PHASES>, N_PIECE_TYPES>, N_COLORS>psqTable;

	constexpr std::array<Score, 7>kPtValues = { 0, 100, 330, 350, 525, 1100, 8000 };
	constexpr std::array<Score, 16>kPieceValues = { 0, kPtValues[1], kPtValues[2], kPtValues[3], kPtValues[4], kPtValues[5], kPtValues[6], 0,
													0, kPtValues[1], kPtValues[2], kPtValues[3], kPtValues[4], kPtValues[5], kPtValues[6], 0, };

	inline void init() {
		psqTable[WHITE][PAWN][MID_GAME] = {
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, -5, 0, 15, 15, 0,
			10, 0, 10, 10, 10, 0, 10, 10,
			10, 0, 20, 30, 30, 0, 0, 10,
			20, 15, 30, 50, 45, 25, 10, 20,
			30, 25, 30, 50, 50, 20, 25, 30,
			50, 50, 50, 50, 50, 50, 50, 50,
			0, 0, 0, 0, 0, 0, 0, 0,
		};

		psqTable[WHITE][PAWN][END_GAME] = {
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, -5, 0, 15, 15, 0,
			10, 0, 10, 10, 10, 0, 10, 10,
			10, 0, 20, 30, 30, 0, 0, 10,
			20, 15, 30, 50, 45, 25, 10, 20,
			30, 25, 30, 50, 50, 20, 25, 30,
			50, 50, 50, 50, 50, 50, 50, 50,
			0, 0, 0, 0, 0, 0, 0, 0,
		};

		psqTable[WHITE][KNIGHT][MID_GAME] = {
			-30, 0, 0, 0, 0, 0, -5, -30,
			-20, 0, 0, 25, 25, 0, 0, -20,
			5, 25, 30, 25, 25, 30, 25, 5,
			15, 15, 25, 25, 25, 25, 15, 15,
			15, 25, 30, 30, 30, 30, 25, 15,
			20, 35, 40, 40, 40, 40, 35, 20,
			10, 35, 40, 40, 40, 40, 35, 10,
			5, 10, 15, 15, 15, 15, 10, 5,
		};

		psqTable[WHITE][KNIGHT][END_GAME] = {
			-30, 0, 0, 0, 0, 0, -5, -30,
			-20, 0, 0, 25, 25, 0, 0, -20,
			5, 25, 30, 25, 25, 30, 25, 5,
			15, 15, 25, 25, 25, 25, 15, 15,
			15, 25, 30, 30, 30, 30, 25, 15,
			20, 35, 40, 40, 40, 40, 35, 20,
			10, 35, 40, 40, 40, 40, 35, 10,
			5, 10, 15, 15, 15, 15, 10, 5,
		};

		psqTable[WHITE][BISHOP][MID_GAME] = {
			-10, 20, 0, 0, 0, 0, 0, -50,
			15, 15, 15, 15, 20, 0, 25, 20,
			15, 15, 15, 20, 15, 0, 20, 10,
			20, 0, 20, 15, 10, 20, 0, 20,
			0, 20, 5, 15, 15, 5, 20, 0,
			20, 0, 5, 10, 10, 5, 0, 20,
			-10, 0, 0, 0, 0, 0, 0, -10,
			-10, -10, -10, -10, -10, -10, -10, -10,
		};

		psqTable[WHITE][BISHOP][END_GAME] = {
			-10, 20, 0, 0, 0, 0, 0, -50,
			15, 15, 15, 15, 20, 0, 25, 20,
			15, 15, 15, 20, 15, 0, 20, 10,
			20, 0, 20, 15, 10, 20, 0, 20,
			0, 20, 5, 15, 15, 5, 20, 0,
			20, 0, 5, 10, 10, 5, 0, 20,
			-10, 0, 0, 0, 0, 0, 0, -10,
			-10, -10, -10, -10, -10, -10, -10, -10,
		};

		psqTable[WHITE][ROOK][MID_GAME] = {
			5, 10, 20, 20, 20, 0, 0, 0,
			0, 5, 10, 0, 0, 0, 0, -5,
			10, 5, 10, 0, 0, 0, 10, 10,
			0, 5, 10, 0, 0, 5, 0, 0,
			10, 10, 10, 10, 10, 10, 10, 10,
			30, 30, 30, 30, 30, 30, 30, 30,
			40, 40, 40, 40, 40, 40, 40, 40,
			40, 40, 40, 40, 40, 40, 40, 40,
		};

		psqTable[WHITE][ROOK][END_GAME] = {
			5, 10, 20, 20, 20, 0, 0, 0,
			0, 5, 10, 0, 0, 0, 0, -5,
			10, 5, 10, 0, 0, 0, 10, 10,
			0, 5, 10, 0, 0, 5, 0, 0,
			10, 10, 10, 10, 10, 10, 10, 10,
			30, 30, 30, 30, 30, 30, 30, 30,
			40, 40, 40, 40, 40, 40, 40, 40,
			40, 40, 40, 40, 40, 40, 40, 40,
		};

		psqTable[WHITE][QUEEN][MID_GAME] = {
			-10, 5, 5, 5, 5, -10, -10, -10,
			-10, 5, 15, 5, 0, 0, 0, -10,
			-10, 15, 5, 10, 5, 5, 5, 5,
			0, 5, 5, 10, 10, 10, 10, 10,
			5, 5, 5, 5, 10, 10, 10, 10,
			10, 10, 10, 15, 20, 20, 20, 20,
			20, 20, 25, 30, 40, 40, 40, 40,
			20, 25, 30, 35, 40, 40, 40, 40,
		};

		psqTable[WHITE][QUEEN][END_GAME] = {
			-10, 5, 5, 5, 5, -10, -10, -10,
			-10, 5, 15, 5, 0, 0, 0, -10,
			-10, 15, 5, 10, 5, 5, 5, 5,
			0, 5, 5, 10, 10, 10, 10, 10,
			5, 5, 5, 5, 10, 10, 10, 10,
			10, 10, 10, 15, 20, 20, 20, 20,
			20, 20, 25, 30, 40, 40, 40, 40,
			20, 25, 30, 35, 40, 40, 40, 40,
		};

		psqTable[WHITE][KING][MID_GAME] = {
			20, 25, 10, -20, 0, 10, 30, 20,
			20, 10, 0, 0, 0, 0, 10, 20,
			-10, -20, -20, -20, -20, -20, -20, -10,
			-20, -30, -30, -40, -40, -30, -30, -20,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
		};

		psqTable[WHITE][KING][END_GAME] = {
			-15, -10, -10, -20, -20, -20, -10, -15,
			-10, -10, -10, -15, -15, -10, -10, -10,
			-5, -5, -5, 0, 0, -5, -5, -5,
			-5, 0, 0, 0, 0, 0, 0, -5,
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
		};

		psqTable[BLACK][PAWN][MID_GAME] = {
			0, 0, 0, 0, 0, 0, 0, 0,
			50, 50, 50, 50, 50, 50, 50, 50,
			20, 25, 30, 45, 30, 30, 25, 20,
			15, 10, 25, 40, 25, 25, 10, 15,
			10, 10, 20, 35, 20, 0, 0, 5,
			10, 10, 20, 20, 20, 0, 10, 10,
			0, 5, 0, 5, 0, 5, 10, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
		};

		psqTable[BLACK][PAWN][END_GAME] = {
			0, 0, 0, 0, 0, 0, 0, 0,
			50, 50, 50, 50, 50, 50, 50, 50,
			20, 25, 30, 45, 30, 30, 25, 20,
			15, 10, 25, 40, 25, 25, 10, 15,
			10, 10, 20, 35, 20, 0, 0, 5,
			10, 10, 20, 20, 20, 0, 10, 10,
			0, 5, 0, 5, 0, 5, 10, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
		};

		psqTable[BLACK][KNIGHT][MID_GAME] = {
			5, 10, 15, 15, 15, 15, 10, 5,
			10, 35, 40, 40, 40, 40, 35, 10,
			20, 35, 40, 40, 40, 40, 35, 20,
			15, 25, 30, 30, 30, 30, 25, 15,
			15, 15, 25, 25, 25, 25, 15, 15,
			5, 25, 30, 25, 25, 30, 25, 5,
			-20, 0, 0, 25, 25, 0, 0, -20,
			-30, -5, 0, 0, 0, 0, 0, -30,
		};

		psqTable[BLACK][KNIGHT][END_GAME] = {
			5, 10, 15, 15, 15, 15, 10, 5,
			10, 35, 40, 40, 40, 40, 35, 10,
			20, 35, 40, 40, 40, 40, 35, 20,
			15, 25, 30, 30, 30, 30, 25, 15,
			15, 15, 25, 25, 25, 25, 15, 15,
			5, 25, 30, 25, 25, 30, 25, 5,
			-20, 0, 0, 25, 25, 0, 0, -20,
			-30, -5, 0, 0, 0, 0, 0, -30,
		};

		psqTable[BLACK][BISHOP][MID_GAME] = {
			-10, -10, -10, -10, -10, -10, -10, -10,
			-10, 0, 0, 0, 0, 0, 0, -10,
			20, 0, 5, 10, 10, 5, 0, 20,
			0, 20, 5, 15, 15, 5, 20, 0,
			20, 0, 20, 10, 10, 20, 0, 20,
			15, 15, 0, 20, 15, 20, 10, 10,
			25, 20, 0, 15, 20, 0, 15, 15,
			0, 0, 0, 0, 0, 0, 0, -50,
		};

		psqTable[BLACK][BISHOP][END_GAME] = {
			-10, -10, -10, -10, -10, -10, -10, -10,
			-10, 0, 0, 0, 0, 0, 0, -10,
			20, 0, 5, 10, 10, 5, 0, 20,
			0, 20, 5, 15, 15, 5, 20, 0,
			20, 0, 20, 10, 10, 20, 0, 20,
			15, 15, 0, 20, 15, 20, 10, 10,
			25, 20, 0, 15, 20, 0, 15, 15,
			0, 0, 0, 0, 0, 0, 0, -50,
		};

		psqTable[BLACK][ROOK][MID_GAME] = {
			40, 40, 40, 40, 40, 40, 40, 40,
			40, 40, 40, 40, 40, 40, 40, 40,
			30, 30, 30, 30, 30, 30, 30, 30,
			10, 10, 10, 10, 10, 10, 10, 10,
			0, 0, 5, 0, 0, 0, 0, 0,
			0, 0, 5, 0, 0, 0, 20, 10,
			5, 0, 5, 0, 0, 0, 0, 0,
			10, 10, 20, 20, 20, 0, 0, 0,
		};

		psqTable[BLACK][ROOK][END_GAME] = {
			40, 40, 40, 40, 40, 40, 40, 40,
			40, 40, 40, 40, 40, 40, 40, 40,
			30, 30, 30, 30, 30, 30, 30, 30,
			10, 10, 10, 10, 10, 10, 10, 10,
			0, 0, 5, 0, 0, 0, 0, 0,
			0, 0, 5, 0, 0, 0, 20, 10,
			5, 0, 5, 0, 0, 0, 0, 0,
			10, 10, 20, 20, 20, 0, 0, 0,
		};

		psqTable[BLACK][QUEEN][MID_GAME] = {
			15, 15, 20, 30, 40, 40, 40, 40,
			15, 15, 20, 20, 40, 40, 40, 40,
			10, 10, 10, 15, 20, 20, 20, 20,
			5, 5, 5, 5, 5, 5, 10, 5,
			10, 0, 5, 5, 5, 10, 0, 0,
			-10, 15, 5, 10, 5, 5, 0, -10,
			-10, -10, 15, 5, 0, 5, 0, -10,
			0, -10, 5, 5, 5, 5, -10, -10,
		};

		psqTable[BLACK][QUEEN][END_GAME] = {
			15, 15, 20, 30, 40, 40, 40, 40,
			15, 15, 20, 20, 40, 40, 40, 40,
			10, 10, 10, 15, 20, 20, 20, 20,
			5, 5, 5, 5, 5, 5, 10, 5,
			10, 0, 5, 5, 5, 10, 0, 0,
			-10, 15, 5, 10, 5, 5, 0, -10,
			-10, -10, 15, 5, 0, 5, 0, -10,
			0, -10, 5, 5, 5, 5, -10, -10,
		};

		psqTable[BLACK][KING][MID_GAME] = {
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-30, -40, -40, -50, -50, -40, -40, -30,
			-20, -30, -30, -40, -40, -30, -30, -20,
			-10, -20, -20, -20, -20, -20, -20, -10,
			20, 10, 0, 0, 0, 0, 10, 25,
			20, 25, 10, -20, 0, 10, 30, 20,
		};

		psqTable[BLACK][KING][END_GAME] = {
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0,
			-5, 0, 0, 0, 0, 0, 0, -5,
			-5, -5, -5, 0, 0, -5, -5, -5,
			-10, -10, -10, -15, -15, -10, -10, -10,
			-15, -10, -20, -20, -20, -10, -10, -15,
		};
	}
}

inline Score evaluate(const Board& board) {
	using namespace eval;

	const Color us = board.side_to_move;
	const Color them = !us;
	Score result =
		kPieceValues[PAWN] * (board.pieces(us, PAWN).popcount() - board.pieces(them, PAWN).popcount()) +
		kPieceValues[KNIGHT] * (board.pieces(us, KNIGHT).popcount() - board.pieces(them, KNIGHT).popcount()) +
		kPieceValues[BISHOP] * (board.pieces(us, BISHOP).popcount() - board.pieces(them, BISHOP).popcount()) +
		kPieceValues[ROOK] * (board.pieces(us, ROOK).popcount() - board.pieces(them, ROOK).popcount()) +
		kPieceValues[QUEEN] * (board.pieces(us, QUEEN).popcount() - board.pieces(them, QUEEN).popcount());

	const bool wQueens = static_cast<bool>(board.pieces(WHITE, QUEEN));
	const bool bQueens = static_cast<bool>(board.pieces(BLACK, QUEEN));
	bool isEndgame;
	if (wQueens && ((board.pieces(KNIGHT) | board.pieces(BISHOP) | board.pieces(ROOK)) & board.color(WHITE)).popcount() > 1 ||
		bQueens && ((board.pieces(KNIGHT) | board.pieces(BISHOP) | board.pieces(ROOK)) & board.color(WHITE)).popcount() > 1)
		isEndgame = false;
	else
		isEndgame = true;
	const GamePhases gamePhase = isEndgame ? END_GAME : MID_GAME;

	Score psqScore = 0;
	for (Square sq = A1; sq < N_SQUARES; ++sq) {
		const Piece pc = board.PieceOn(sq);

		if (pc == NO_PIECE)
			continue;

		const PieceType pt = piece_type::make(pc);
		const Color c = color::make(pc);
		const Score s = psqTable[c][pt][gamePhase][sq];
		psqScore += c == us ? s : -s;
	}
	result += psqScore;
	return result;
}